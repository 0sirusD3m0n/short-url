[{"/home/taylor/Sandbox/urlshortener/short-url-client/src/index.js":"1","/home/taylor/Sandbox/urlshortener/short-url-client/src/reportWebVitals.js":"2","/home/taylor/Sandbox/urlshortener/short-url-client/src/App.js":"3","/home/taylor/Sandbox/urlshortener/short-url-client/src/components/Form.js":"4"},{"size":1018,"mtime":1652736647111,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1652730064805,"results":"7","hashOfConfig":"6"},{"size":536,"mtime":1652739849991,"results":"8","hashOfConfig":"6"},{"size":8775,"mtime":1652739518916,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"ed1ogb",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/taylor/Sandbox/urlshortener/short-url-client/src/index.js",[],[],[],"/home/taylor/Sandbox/urlshortener/short-url-client/src/reportWebVitals.js",[],[],"/home/taylor/Sandbox/urlshortener/short-url-client/src/App.js",["24"],[],"/home/taylor/Sandbox/urlshortener/short-url-client/src/components/Form.js",["25"],[],"import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { getDatabase, child, ref, set, get } from \"firebase/database\";\nimport { isWebUri } from \"valid-url\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport  Tooltip  from \"react-bootstrap/Tooltip\";\nimport { async } from \"@firebase/util\";\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            longURL: '',\n            preferedAlias: '',\n            generatedURL: '',\n            loading: false,\n            errors: [],\n            errorMessage: {},\n            toolTipMessage: 'Copy To Clip Board'\n        };\n    }\n\n\n    onSubmit = async (event) => {\n        event.preventDefault(); // prevents the page from reloading\n        this.setState({\n            loading: true,\n            generatedURL: ''\n        })\n\n        //validate input from user\n        var isFormValid = await this.validateInput()\n        if (!isFormValid) {\n            return;\n        }\n\n        var generatedKey = nanoid(5);\n        var generatedURL = \"url.com/\" + generatedKey;\n\n        if (this.state.preferedAlias !== '') {\n            generatedKey = this.state.preferedAlias\n            generatedURL = \"url.com/\" + this.state.preferedAlias;\n        }\n\n        const db = getDatabase();\n\n        set(ref(db, '/' + generatedKey), {\n            generatedKey: generatedKey,\n            longURL: this.state.longURL,\n            preferedAlias: this.state.preferedAlias,\n            generatedURL: generatedURL\n        }).then((result) => {\n            this.setState({\n                generatedURL: generatedURL,\n                loading: false\n            })\n        }).catch((e) => {\n        })\n    }\n\n    hasError = (key) => {\n        return this.state.errors.indexOf(key) !== -1;\n    }\n\n    handleChange = (e) => {\n        const { id, value } = e.target\n        this.setState(prevState => ({\n            ...prevState,\n            [id]: value\n        }))\n    }\n\n    validateInput = async () => {\n        var errors = [];\n        var errorMessages = this.state.errorMessage;\n\n        // validate long url\n        if (this.state.longURL.length === 0) {\n            errors.push(\"longURL\");\n            errorMessages['longURL'] = 'Please enter your URL!';\n        } else if (!isWebUri(this.state.longURL)) {\n            errors.push(\"longURL\");\n            errorMessages['longURL'] = \"Please enter a URL in the form of https://www....\";\n        }\n\n        // Preferred Alias\n        if (this.state.preferedAlias !== '') {\n            if (this.state.preferedAlias.length > 6) {\n                errors.push(\"suggestedAlias\");\n                errorMessages['suggestedAlias'] = \"Please enter an alias of less than 6 characters\";\n            } else if (this.state.preferedAlias.indexOf(' ') >= 0) {\n                errors.push(\"suggestedAlias\");\n                errorMessages['suggestedAlias'] = \"Please enter an alias of less than 6 charactersSpaces are not allowed in URLS\";\n            }\n\n            var keyExists = await this.checkKeyExists();\n\n            if (keyExists.exists()) {\n                errors.push(\"suggestedAlias\");\n                errorMessages['suggestedAlias'] = \"The alias you have suggested already exists. Please enter another one\";\n            }\n        }\n\n        this.setState({\n            errors: errors,\n            errorMessages: errorMessages,\n            loading: false\n        });\n\n        if (errors.length > 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    checkKeyExists = async () => {\n        const dbRef = ref(getDatabase());\n        return get(child(dbRef, `/${this.state.preferedAlias}`)).catch((error) => {\n            return false;\n        })\n    }\n\n    copyToClipBoard = () => {\n        navigator.clipboard.writeText(this.state.generatedURL)\n        this.setState({\n            toolTipMessage: 'Copied!'\n        });\n    }\n\n    render(){\n        return (\n            <div className=\"container\">\n                <form autoComplete=\"off\">\n                    <h3>Short URL!</h3>\n\n                    <div className=\"form-group\">\n                        <label>Enter Your Long URL</label>\n                        <input id=\"longURL\"\n                            onChange={this.handleChange}\n                            value={this.state.longURL}\n                            type=\"url\"\n                            required\n                            className={\n                                this.hasError(\"longURL\")\n                                    ? \"form-control is-invalid\"\n                                    : \"form-control\"\n                            }\n                            placeholder=\"https://www...\"\n                        />\n                    </div>\n                    <div\n                        className={\n                            this.hasError(\"longURL\") ? \"text-danger\" : \"visually-hidden\"\n                        }\n                    >\n                        {this.state.errorMessage.longURL}\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"basic-url\">Your Short URL</label>\n                        <div className=\"input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">shorturl.com</span>\n                            </div>\n                            <input\n                                id=\"preferedAlias\"\n                                onChange={this.handleChange}\n                                value={this.state.preferedAlias}\n                                className={\n                                    this.hasError(\"preferedAlias\")\n                                        ? \"form-control is-invalid\"\n                                        : \"form-control\"\n                                }\n                                type=\"text\" placeholder=\"eg. 3fwias (Optional)\"\n                            />\n                        </div>\n                        <div\n                            className={\n                                this.hasError(\"suggestedAlias\") ? \"text-danger\" : \"visually-hidden\"\n                            }\n                        >\n                            {this.state.errorMessage.suggestedAlias}\n                        </div>\n                    </div>\n                    <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSubmit}>\n                        {\n                            this.state.loading ?\n                                <div>\n                                    <span className=\"spinniner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                                </div> :\n                                <div>\n                                    <span className=\"visually-hidden spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                                    <span>Shorten the URL</span>\n                                </div>\n                        }\n                    </button>\n\n                    {\n                        this.state.generatedURL === '' ?\n                            <div></div>\n                            :\n                            <div className=\"generatedurl\">\n                                <span>Your generated URL is: </span>\n                                <div className=\"input-group mb-3\">\n                                    <input disabled type=\"text\" value={this.state.generatedURL} className=\"form-control\" placeholder=\"Recipients URL\" aria-label=\"Recipients URL\" aria-describedby=\"basic-aria2\"></input>\n                                    <div className=\"input-group-append\">\n                                        <OverlayTrigger\n                                            key={'top'}\n                                            placement={'top'}\n                                            overlay={\n                                                <Tooltip  id={`tooltip-${'top'}`}>\n                                                    {this.state.toolTipMessage}\n                                                </Tooltip>\n                                            }\n                                        >\n                                            <button onClick={() => this.copyToClipBoard()} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Tooltip on Top\" className=\"btn btn-outline-secondary\" type=\"button\">Copy</button>\n                                        </OverlayTrigger>\n                                    </div>\n                                </div>\n                            </div>\n                    }\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form;",{"ruleId":"26","severity":1,"message":"27","line":1,"column":27,"nodeType":"28","messageId":"29","endLine":1,"endColumn":33},{"ruleId":"26","severity":1,"message":"30","line":7,"column":10,"nodeType":"28","messageId":"29","endLine":7,"endColumn":15},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'async' is defined but never used."]